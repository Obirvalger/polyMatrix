# This file was *autogenerated* from the file matrices.sage
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4)#! /usr/bin/env sage

ms5 =  [
  [
    [_sage_const_0 ,_sage_const_4 ,_sage_const_2 ,_sage_const_3 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_2 ,_sage_const_3 ,_sage_const_1 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_2 ,_sage_const_3 ,_sage_const_1 ],
    [_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_2 ,_sage_const_3 ],
    [_sage_const_3 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_2 ],
    [_sage_const_2 ,_sage_const_3 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_2 ,_sage_const_3 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ],
  ],
  [
    [_sage_const_0 ,_sage_const_4 ,_sage_const_1 ,_sage_const_1 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_1 ,_sage_const_1 ,_sage_const_4 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_1 ,_sage_const_1 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_1 ,_sage_const_1 ],
    [_sage_const_1 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_1 ],
    [_sage_const_1 ,_sage_const_1 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_1 ,_sage_const_1 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ],
  ],
  [
    [_sage_const_0 ,_sage_const_4 ,_sage_const_3 ,_sage_const_2 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_3 ,_sage_const_2 ,_sage_const_1 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_3 ,_sage_const_2 ,_sage_const_1 ],
    [_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_3 ,_sage_const_2 ],
    [_sage_const_2 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_3 ],
    [_sage_const_3 ,_sage_const_2 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_3 ,_sage_const_2 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ],
  ],
  [
    [_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ],
  ],
  [
    [_sage_const_4 ,_sage_const_2 ,_sage_const_3 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_4 ,_sage_const_2 ,_sage_const_3 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_2 ,_sage_const_3 ,_sage_const_1 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_2 ,_sage_const_3 ,_sage_const_1 ],
    [_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_2 ,_sage_const_3 ],
    [_sage_const_3 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_2 ],
    [_sage_const_2 ,_sage_const_3 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ],
  ],
  [
    [_sage_const_4 ,_sage_const_1 ,_sage_const_1 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_4 ,_sage_const_1 ,_sage_const_1 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_1 ,_sage_const_1 ,_sage_const_4 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_1 ,_sage_const_1 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_1 ,_sage_const_1 ],
    [_sage_const_1 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_1 ],
    [_sage_const_1 ,_sage_const_1 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ],
  ],
  [
    [_sage_const_4 ,_sage_const_3 ,_sage_const_2 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_4 ,_sage_const_3 ,_sage_const_2 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_3 ,_sage_const_2 ,_sage_const_1 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_3 ,_sage_const_2 ,_sage_const_1 ],
    [_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_3 ,_sage_const_2 ],
    [_sage_const_2 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_3 ],
    [_sage_const_3 ,_sage_const_2 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ],
  ],
  [
    [_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ],
  ],
  [
    [_sage_const_2 ,_sage_const_3 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_2 ,_sage_const_3 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_2 ,_sage_const_3 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_2 ,_sage_const_3 ,_sage_const_1 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_2 ,_sage_const_3 ,_sage_const_1 ],
    [_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_2 ,_sage_const_3 ],
    [_sage_const_3 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_2 ],
  ],
  [
    [_sage_const_1 ,_sage_const_1 ,_sage_const_4 ,_sage_const_0 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_1 ,_sage_const_1 ,_sage_const_4 ,_sage_const_0 ,_sage_const_4 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_1 ,_sage_const_4 ,_sage_const_0 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_1 ,_sage_const_4 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_1 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_0 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_1 ],
    [_sage_const_1 ,_sage_const_4 ,_sage_const_0 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ],
  ],
  [
    [_sage_const_3 ,_sage_const_2 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_3 ,_sage_const_2 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_3 ,_sage_const_2 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_3 ,_sage_const_2 ,_sage_const_1 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_3 ,_sage_const_2 ,_sage_const_1 ],
    [_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_3 ,_sage_const_2 ],
    [_sage_const_2 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_3 ],
  ],
  [
    [_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ],
  ],
  [
    [_sage_const_3 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_2 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_3 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_2 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_3 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_2 ],
    [_sage_const_2 ,_sage_const_0 ,_sage_const_0 ,_sage_const_3 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_2 ,_sage_const_0 ,_sage_const_0 ,_sage_const_3 ,_sage_const_1 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_4 ,_sage_const_2 ,_sage_const_0 ,_sage_const_0 ,_sage_const_3 ,_sage_const_1 ],
    [_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_2 ,_sage_const_0 ,_sage_const_0 ,_sage_const_3 ],
  ],
  [
    [_sage_const_1 ,_sage_const_4 ,_sage_const_0 ,_sage_const_4 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_1 ,_sage_const_4 ,_sage_const_0 ,_sage_const_4 ,_sage_const_1 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_4 ,_sage_const_0 ,_sage_const_4 ,_sage_const_1 ],
    [_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_4 ,_sage_const_0 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_4 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_4 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_0 ,_sage_const_4 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ],
  ],
  [
    [_sage_const_2 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_3 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_2 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_3 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_2 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_3 ],
    [_sage_const_3 ,_sage_const_0 ,_sage_const_0 ,_sage_const_2 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_3 ,_sage_const_0 ,_sage_const_0 ,_sage_const_2 ,_sage_const_1 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_4 ,_sage_const_3 ,_sage_const_0 ,_sage_const_0 ,_sage_const_2 ,_sage_const_1 ],
    [_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_3 ,_sage_const_0 ,_sage_const_0 ,_sage_const_2 ],
  ],
  [
    [_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ],
  ],
  [
    [_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_2 ,_sage_const_3 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_2 ,_sage_const_3 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_2 ,_sage_const_3 ],
    [_sage_const_3 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_2 ],
    [_sage_const_2 ,_sage_const_3 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_2 ,_sage_const_3 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_4 ,_sage_const_2 ,_sage_const_3 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ],
  ],
  [
    [_sage_const_4 ,_sage_const_0 ,_sage_const_4 ,_sage_const_1 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_4 ,_sage_const_0 ,_sage_const_4 ,_sage_const_1 ,_sage_const_1 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_0 ,_sage_const_4 ,_sage_const_1 ,_sage_const_1 ],
    [_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_0 ,_sage_const_4 ,_sage_const_1 ],
    [_sage_const_1 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_0 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_1 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_4 ,_sage_const_1 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ],
  ],
  [
    [_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_3 ,_sage_const_2 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_3 ,_sage_const_2 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_3 ,_sage_const_2 ],
    [_sage_const_2 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ,_sage_const_3 ],
    [_sage_const_3 ,_sage_const_2 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_3 ,_sage_const_2 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_4 ,_sage_const_3 ,_sage_const_2 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ],
  ],
  [
    [_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ,_sage_const_4 ],
    [_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_4 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 ],
  ]
]

ms5 = map(lambda m: matrix(GF(_sage_const_5 ), m), ms5)

ms3 = [
  [
    [_sage_const_0 ,_sage_const_2 ,_sage_const_1 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_2 ,_sage_const_1 ],
    [_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_2 ],
    [_sage_const_2 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ],
  ],
  [
    [_sage_const_2 ,_sage_const_2 ,_sage_const_2 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_2 ,_sage_const_2 ,_sage_const_2 ],
    [_sage_const_2 ,_sage_const_0 ,_sage_const_2 ,_sage_const_2 ],
    [_sage_const_2 ,_sage_const_2 ,_sage_const_0 ,_sage_const_2 ],
  ],
  [
    [_sage_const_2 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_2 ,_sage_const_1 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_0 ,_sage_const_2 ,_sage_const_1 ],
    [_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_2 ],
  ],
  [
    [_sage_const_2 ,_sage_const_2 ,_sage_const_2 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_2 ,_sage_const_2 ,_sage_const_2 ],
    [_sage_const_2 ,_sage_const_0 ,_sage_const_2 ,_sage_const_2 ],
    [_sage_const_2 ,_sage_const_2 ,_sage_const_0 ,_sage_const_2 ],
  ],
  [
    [_sage_const_1 ,_sage_const_0 ,_sage_const_2 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_1 ,_sage_const_0 ,_sage_const_2 ],
    [_sage_const_2 ,_sage_const_0 ,_sage_const_1 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_2 ,_sage_const_0 ,_sage_const_1 ],
  ],
  [
    [_sage_const_2 ,_sage_const_2 ,_sage_const_2 ,_sage_const_0 ],
    [_sage_const_0 ,_sage_const_2 ,_sage_const_2 ,_sage_const_2 ],
    [_sage_const_2 ,_sage_const_0 ,_sage_const_2 ,_sage_const_2 ],
    [_sage_const_2 ,_sage_const_2 ,_sage_const_0 ,_sage_const_2 ],
  ]
]

ms3 = map(lambda m: matrix(GF(_sage_const_3 ), m), ms3)

def list_transpose(l):
        return [list(i) for i in zip(*l)]

def rol(l,n):
    n = n % len(l)
    return l[n:] + l[:n]

def ror(l,n):
    n = n % len(l)
    return l[-n:] + l[:-n]

def a(k, d = _sage_const_0 ):
    def a(i,j):
        if (i == _sage_const_0  and j == _sage_const_0 ):
            return _sage_const_1 
        elif(i == k-_sage_const_1 ):
            return (-_sage_const_1 ) % k
        elif(i == _sage_const_0  or j == _sage_const_0 ):
            return _sage_const_0 
        else:
            return (-(j)**((k-_sage_const_1 -i) % k)) % k
    
    m = [[_sage_const_0  for i in range(k)] for j in range(k)]
    
    for i in range(k):
        for j in range(k):
            m[i][j] = a(i,j)
    
    m = list_transpose(rol(list_transpose(m), d))
    
    return matrix(GF(k), m)
    #return m

def a_i(k, i, l, d = _sage_const_0 ):
    v = list(a(k,d)[i])
    v += [_sage_const_0 ] * (l - len(v))
    
    m = []
    for n in range(l):
        m.append(ror(v,n))
    
    return matrix(GF(k), m)
    #return m

def to_matrix(k, l):
    return map(lambda m: matrix(GF(k), m), l)

def matrices(k, t):
    return to_matrix(k, [a_i(k,i,t,d) for d in range(k) for i in range(_sage_const_1 ,k)])

def all_matrices(k, t):
    return to_matrix(k, [a_i(k,i,t,d) for d in range(k) for i in range(_sage_const_0 ,k)])

def kers(l, k = _sage_const_0 ):
    if (type(l[_sage_const_0 ]) == sage.matrix.matrix_modn_dense_float.Matrix_modn_dense_float):
        k  = l[_sage_const_0 ].base_ring().cardinality()
        ks = map(lambda x: x.right_kernel(), l)
    else:
        if (k < _sage_const_2 ):
            raise(ValueError("k is not get or has value < 2"))
        n  = len(l[_sage_const_0 ])
        ks = map(lambda m: matrix(GF(k), m).right_kernel(), l)
    return ks

def hypotes(k, start, stop = None):
    if stop is None:
        stop = start
        start = k+_sage_const_1 
    
    return ["Error {}".format(p) for p in range(start, stop) if unit_kers(matrices(k,p)) != is_prime(p)]

def test_hypot(k, n):
    return unit_kers(matrices(k,n)) != is_prime(n)

def unit_kers(l, k = _sage_const_0 ):
    if (type(l[_sage_const_0 ]) == sage.matrix.matrix_modn_dense_float.Matrix_modn_dense_float):
        n  = l[_sage_const_0 ].nrows()
        k  = l[_sage_const_0 ].base_ring().cardinality()
        ks = map(lambda x: x.right_kernel(), l)
    else:
        if (k < _sage_const_2 ):
            raise(ValueError("k is not get or has value < 2"))
        n  = len(l[_sage_const_0 ])
        ks = kers(l, k)
    m  = []
    for i in range(k):
        m.append([i] * n)
    return len(filter(lambda y: m == y, map(lambda x: map(list, list(x)), ks))) == len(l)
